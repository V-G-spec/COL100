# Declaration of Originality
# I solemnly swear that the work/code/algorithm in this file has entirely been done by me without any external help of any kind.

# Regards
# Vansh Gupta
# 2019CH10143










### Answer 1 ###

# fun intadd(l1,[])=l1

# 	|intadd([],l2)=l2

# 	|intadd(x1::[],y::ls)= if (x1+y)>9 then ((x1+y) mod 10::intadd([1],ls)) else (x1+y)::intadd([],ls)

# 	|intadd(x1::x2::x,y1::y)=

# 		if x1+y1>9 then ((x1+y1) mod 10)::intadd((x2+1)::x,y)

# 		else (x1+y1)::intadd(x2::x,y);


def addNum(N1, N2, n):
	#Assert len(N1) = len(N2) = n
	i=0
	carry = 0
	#INV: For all 0<=i<=n , the digit at the ith position in the resultant list is (N1[i]+N2[i]) mod 10 and (N1[i]+N2[i]) div 10
	# is carried to the lesser significant bit
	# After the i reaches n, the first n digit of the resultant array (stored in N1) are the n digits of the sum
	# If there is an extra bit owing to residual number in carry, it is appended to the end
	while (i<n):
		carry=0	
		N1[i], carry = (N1[i]+N2[i])%10, (N1[i]+N2[i])//10
		
		i+=1
		if i==n:
			if carry!=0:
				N1.append(carry)
		else:
			N1[i]+=carry

	print("Sum as reversed list is:",N1,"\nSum as list is:",N1[::-1],"\n Sum is:",*N1[::-1])


# Time Complexity: O(n) where n is the size
# The loop runs n number of times and each loop has constant number of steps, independent of n 
# => O(cn) = O(n)
# Space Complexity: Since it is the external space required and I am updating N1 in my code, the space complexity is O(2) = O(1)
# INV:
# After ith iteration
# addNum(N1[0:i], N2:[0:i], i)      =   
# addNum(N1[0:i-1], N2:[0:i-1], i-1)[0:i-1]     +  
# addNum([N1[i-1] + addNum(N1[0:i-1], N2:[0:i-1], i-1)[i-1]], [N2[i-1]], 1)


# def addNum2 (N1, N2, n ) :
# 	i = 0
# 	carry = 0
# 	addition = [] 
# 	while (i<n):
# 		if N1[i] + N2[i] + carry> 10:
# 			addition.append(N1[i] + N2[i] + carry - 10)
# 			carry = 1
# 			i+=1
# 		else:
# 			addition.append(N1[i] + N2[i] + carry)
# 			carry = 0
# 			i+=1
# 	addition.append(carry)
# 	print (addition)

# N1=[3,3,6]
# N2=[8,7,8]
# assert len(N1)==len(N2)
# n=len(N1)
# addNum2(N1,N2,n)







# Answer 3

def find(L, k):
	if k==1:
		return L[k]
	else:
		return find(L[2:],k-1)

r=find([1,3,5,7,9,12,42],2)
print(r)

#Induction hypothesis: 
# Let p =2k-1 = kth odd element
# to find: List[p]
# Induction hypothesis, At every step other than the base case, L[1] is the (k-i)th odd number and we recursively reduce this value of k and
# slice the list by 2 elements such that
# Time complexity:





#Answer 4

class Set:
	def __init__(self):
		self.set=[]

	def insert(self, num):
		if num not in self.set:
			self.set.append(num)
		return self.set.sort()

	def union2(self, S2):
		for num in S2:
			if num not in self.set:
				self.set.append(num)
		return self.set.sort()

	def intersection2(self, S2):
		s=[]
		for i in S2:
			if i in self.set:
				s.append(i)
		return s.sort()

	def show3(self):
		print(self.set)




# Answer 5
eps=1
while(1+eps!=1):
	eps/=2
print(eps)